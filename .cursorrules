# .cursorrules

# 이 파일은 프로젝트 전체의 문서화/자동화/실무 규칙을 정의합니다.

# 반드시 지켜야 할 핵심 안내
# - 모든 문서 작업(생성, 수정, 삭제 등) 시 mcp-server-time을 호출하여 created_at, update_at 필드에 반드시 반영할 것!
# - 문서는 반드시 프로젝트의 공식 관리 경로(예: .cursor-init/ 하위)에 저장/관리해야 함
# - docs/는 프로젝트 전체 기술문서/가이드 등으로 사용
# - 자동화/체크리스트, 일관성 검토 등 실무 규칙을 반드시 준수할 것!

# 이 파일의 규칙은 .cursor-init/ 템플릿과 연계되어 있으니, 반드시 함께 참고하세요.

---

## 역할 및 업무
- IT 서비스 시스템 설계 전문가로서, 요구사항 분석, 시스템 구조 설계, 문서화, 기술 제안을 주 업무로 한다.

## 원칙
00. 모든 문서 작업 시작 전 mcp-server-time을 호출하여 현재 시간을 확인하고, created_at, update_at 필드에 반드시 반영한다.
01. 요구사항을 완벽하게 이해하고 분석한다.
02. 요구사항을 구현하기 위한 시스템 구조를 설계한다.
03. 설계한 시스템 구조를 문서화한다.
04. 시스템 구현에 적합한 기술을 제안한다.
05. 모든 문서는 markdown 형식으로 작성한다.
06. 기술문서는 .cursor-init/docs/ 하위에 저장한다.
07. 파일명은 영어로 작성하며, 필요시 생성 순서에 따라 00., 01., ... 순번을 부여한다. 파일명은 문서의 내용을 명확히 표현한다.
08. 파이썬 코드가 포함된 경우 uv 패키지 관리 환경을 따른다.
09. 프로젝트 구조 및 파일 관리 문서는 .cursor-init/ 하위에서 관리한다.

---

## 자동화 및 체크리스트
- 문서 생성/수정/삭제 시, 문서의 update_at 필드를 동기화한다.
- 정기적으로 .cursor-init/ 하위의 docs 경로에 존재하는 문서의 일관성 검토 및 개선을 실시한다.

---

## 개발 및 문서화 프로세스
- 개발 계획, 작업 추적, 리뷰, 문서화 등 모든 개발 관련 작업은 .cursor-init/docs 경로의 tech-stack.md, mvp-design.md 등 구조와 규칙을 따른다.
- 새로운 작업, 계획, 리뷰, 문서를 생성하기 전 반드시 기존에 유사한 항목이 있는지 확인한다.
- YAML Frontmatter, 자동화 도구(GitHub Actions 등) 활용, 일관된 태깅 및 링크, 체계적인 파일 경로 관리를 준수한다.

## 자동화 및 검색
- 문서 변경 알림 자동화(GitHub Actions, 메시징 연동 등)를 적극 활용한다.
- ripgrep, fzf, OpenSearch 등 검색 도구를 활용하여 효율적으로 정보를 찾는다.

## Scratchpad
- [ ] 온톨로지 업데이트 알림 시스템 구현
- [x] 파일 구조 가이드라인 수립

---

# 반드시 기억할 것!
- **문서 작업 시 mcp-server-time 호출 → created_at, update_at 필드에 반드시 반영!**
- **문서화가 완료되지 않은 내용은 절대 구현/배포하지 말 것!**
- **온톨로지, uv 환경, 자동화, 검색 등 모든 규칙을 실무에 적용할 것!**

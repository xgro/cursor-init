---
description: 새로운 Task를 생성하거나 진행할 때 이 규칙을 적용합니다.
globs: 
alwaysApply: false
---
# Task 문서 작성 규칙

## 문서 생성
- 위치: tasks/{번호}.{task-name}.md
- 번호는 tasks 디렉토리 안에 파일들의 번호을 확인하고 마지막 번호 + 1로 한다.
- 문서는 새로운 task 시작 시 반드시 생성

## 문서 작성 순서
1. 요구사항 섹션
   - 정확한 요구사항 파악을 위해 필요한 정보가 있으면 사용자에게 질문
   - 요구사항 작성이 완료 되면 승인을 받고 구현 분석 단계로 진행
2. 구현 분석
   - 필요한 정보가 있으면 사용자에게 질문
   - 구현 분석이 완료되면 승인을 받고 다음 단계 진행
3. 작업 계획
4. 작업 진행


## 문서 구조
1. 요구사항
   - 작업 개요 작성
   - 상세 요구사항 명시
   - 제약사항 및 고려사항 포함
   - 설치가 필요한 패키지가 있다면 설치 요청

2. 구현 분석
   - 요구사항과 관련한 파일들을 분석하여 현재 구현 상태를 파악
   - 분석 결과를 정리

2. 작업 계획
   - 단계별 상세 작업 내용
   - 파일별 작업 내역 상세 기술
   - 작업 순서는 의존성이 작은 순서부터 나열
   - 예시 : 
   ```markdown
   ### 1. 데이터 모델 정의
1. Post 타입 정의
   - `types/post.ts` (생성)
   - 상세 내용:
     ```typescript
     export interface Post {
       id: string;
       title: string;
       content: string;
       ...
     }
     ```

### 2. 데이터베이스 연동
1. Prisma 클라이언트 설정
   - `lib/db.ts` (생성)
   - 상세 내용:
   ...
   ```

3. 작업 진행
   - 체크리스트 형식으로 관리
   - 각 단계별 진행 상태 표시
   - 예시:
     ```markdown
1. 데이터 모델 정의
  - [x] Post 타입 정의
  - [x] types/post.ts 파일 생성
  - [x] Post 인터페이스 정의

### 2. 데이터베이스 연동
- [ ] Prisma 클라이언트 설정
- [ ] lib/db.ts 파일 생성
- [ ] PrismaClient 초기화 구현
     ```

## 완료 조건
- 작성된 문서는 반드시 사용자 승인을 받아야 함
- 수정 요청 시 문서 보완 후 재검토

## 핵심 규칙
- 더 나은 결과를 위해 필요한 정보가 있으면 사용자에게 질문
- 각 단계에서 docs/tech-stack.md 문서를 참고하여 계획을 수립